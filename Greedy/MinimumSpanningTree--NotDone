//https://practice.geeksforgeeks.org/problems/minimum-spanning-tree/1
// copied solution --yet to be done


      static int spanningTree(int V, int E, ArrayList<ArrayList<Integer>> graph)
    {
        int[] key = new int[V];
        boolean[] mstSet = new boolean[V];
        
        for(int i=0;i<V;i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }
        key[0] = 0;
        for(int count=0;count<V-1;count++) {
            
            int u = minKey(key, mstSet, V);
            
            mstSet[u] = true;
            
            for(int v=0;v<V;v++) {
                if(graph.get(u).get(v)!=0 && mstSet[v]==false && graph.get(u).get(v)<key[v]) {
                
                    key[v] = graph.get(u).get(v);
                }
            }
        }
        int sum=0;
        for(int x=1;x<V;x++) {
            sum += key[x];
        }
        return sum;
    }
    
    static int minKey(int[] key, boolean[] mstSet, int V) {
        int min = Integer.MAX_VALUE;
        int min_index = -1;
        for(int v=0;v<V;v++) {
            if(mstSet[v]==false && key[v]<min) {
                min = key[v];
                min_index = v;
            }
        }
        return min_index;
    }
