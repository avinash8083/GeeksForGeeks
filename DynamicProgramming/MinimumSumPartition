//https://practice.geeksforgeeks.org/problems/minimum-sum-partition/0
// https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
	public static void main (String[] args)
	 {
			Scanner scan = new Scanner(System.in);
		StringBuilder ans = new StringBuilder();
		
		int t = scan.nextInt();
		while(t-->0){
		    int n = scan.nextInt();
		    int[] arr = new int[n];
		    for(int i=0; i<n; i++)
		        arr[i] = scan.nextInt();
		        
	        HashMap<String, Long> map = new HashMap<>();
	        ans.append(solve(arr, 0, n, 0, 0, map)).append("\n");
		}
		System.out.print(ans);
	 }
	static long solve(int[] arr, int i, int n, long sum1, long sum2, HashMap<String, Long> map){
	    String key = sum1 + " " + sum2;
	    if(map.containsKey(key))
	        return map.get(key);
	        
	    if(i == n)
	        return Math.abs(sum1-sum2);
	        
        long res = Math.min(solve(arr, i+1, n, sum1+arr[i], sum2, map),
                        solve(arr, i+1, n, sum1, sum2+arr[i], map));
                        
        map.put(key, res);
        return res;
	}	 
}
//.................other type solution .....................................................
import java.lang.*;
import java.io.*;
import java.util.*;

class GFG
 {
	public static void main (String[] args)
	 {
	    Scanner in=new Scanner(System.in);
	    
	    int testCases=in.nextInt();
	    int i=0,j=0,k=0,n=0,sum=0,arr[]=null,dp[]=null;
	    
	    for(i=0;i<testCases;i++)
	    {
	        sum=0;
	        n=in.nextInt();
	        arr=new int[n];
	        
	        for(j=0;j<n;j++)
	        {
	            arr[j]=in.nextInt();
	            sum+=arr[j];
	        }
	        
	        dp=new int[(sum)/2+1];
	        dp[0]=1;
	        
	        for(j=1;j<=sum/2;j++)
	        dp[j]=0;
	        
	        for(j=0;j<n;j++)
	        for(k=sum/2;k>=0;k--)
	        if(dp[k]==1&&k+arr[j]<sum/2+1)
	        dp[k+arr[j]]=1;
	        
	        for(j=sum/2;j>=0;j--)
	        if(dp[j]==1)
	        break;
	        
	        System.out.println(sum-j-j);
	        
	    }
	 }
}
