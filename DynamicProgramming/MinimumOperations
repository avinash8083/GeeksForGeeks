/*package whatever //do not write package name here */

//  https://practice.geeksforgeeks.org/problems/find-optimum-operation/0
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {

   Scanner in = new Scanner(System.in); 
  
        int s = in.nextInt(); 
        
        
     for(int i=0;i<s;i++){
         int temp = in.nextInt();   
         int result=minimum(temp,0);   
         System.out.println(result);           
        }
	}   
   static  int minimum(int temp,int count){
                 if(temp==1){
                     count=count+1;
                     return count;
                 }
                 if(temp%2==0){
                       temp=temp/2;
                        count=count+1;
                     //  minimum(temp,count);
                 }
                 else{
                     temp=temp-1;
                       count=count+1;
                  //  minimum(temp,count);
                 }
		 // return count;
            return minimum(temp,count);            
     }   
	
}
..........................................other method .....................................................................

/*local copy of count is getting created every time ,so always update count after recursive operation .

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {

   Scanner in = new Scanner(System.in); 
  
        int s = in.nextInt(); 
        
        
     for(int i=0;i<s;i++){
         int temp = in.nextInt();   
         int result=minimum(temp,0);   
         System.out.println(result);           
        }
	}   
   static  int minimum(int temp,int count){
                 if(temp==1){
                     count=count+1;
                     return count;
                 }
                 if(temp%2==0){
                       temp=temp/2;
                        count=count+1;
                     count= minimum(temp,count);
                 }
                 else{
                     temp=temp-1;
                       count=count+1;
                  count= minimum(temp,count);
                 }
                 return count;
           // return minimum(temp,count);            
     }   
	
}
