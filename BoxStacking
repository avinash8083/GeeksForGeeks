//https://practice.geeksforgeeks.org/problems/box-stacking/1



{
//Initial Template for Java
import java.util.*;
import java.lang.*;
import java.io.*;
class gfg
{
    public static void main (String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    
    //sc.next();
    while(t-- > 0)
    {
        int n = sc.nextInt();
        
        int A[]  =new int[1000];
        int B[] = new int[1000];
        int C[] = new int[1000];
        
        for(int i = 0; i < n; i++)
        {
            int a =sc.nextInt();
            int b = sc.nextInt();
            int c = sc.nextInt();
            
            A[i] = a;
            B[i] = b;
            C[i] = c;
        }
        
        Geeks ob = new Geeks();
        System.out.println(ob.maxHeight(A,B,C,n));
    }
   }
}
}
/*This is a function problem.You only need to complete the function given below*/
//User function Template for Java
class Geeks 
{
    public static int maxHeight(int height[], int width[], int length[], int n)
   {    
    Dimension[] dimension=new Dimension[height.length*3];
    int index=0;
       for(int i=0;i<height.length;i++){
           dimension[index++]=Dimension.createDimension(height[i],length[i],width[i]);
           dimension[index++]=Dimension.createDimension(length[i],height[i],width[i]);
           dimension[index++]=Dimension.createDimension(width[i],length[i],height[i]);
       }
       Arrays.sort(dimension);
       int T[] = new int[height.length*3];

        for (int i = 0; i < T.length; i++) {
            T[i] = dimension[i].height;
        }

          for(int i=1;i<T.length;i++){
               for(int j=0;j<i;j++){
                   if(dimension[j].length>dimension[i].length && dimension[j].width>dimension[i].width){
                       T[i]=Math.max(T[i],T[j]+dimension[i].height);
                   }
               }
          }
        int max = Integer.MIN_VALUE;
        for(int i=0; i < T.length; i++){
            if(T[i] > max){
                max = T[i];
            }
        }
        
        return max;   
   }
}
class Dimension implements Comparable<Dimension> {
    int height;
    int length;
    int width;

    Dimension(int height, int length, int width) {
        this.height = height;
        this.length = length;
        this.width = width;
    }

    Dimension() {
    }

    static Dimension createDimension(int height, int side1, int side2) {
        Dimension d = new Dimension();
        d.height = height;
        if (side1 >= side2) {
            d.length = side1;
            d.width = side2;
        } else {
            d.length = side2;
            d.width = side1;
        }
        return d;
    }

    /**
     * Sorts by base area(length X width)
     */
    @Override
    public int compareTo(Dimension d) {
        if (this.length * this.width >= d.length * d.width) {
            return -1;
        } else {
            return 1;
        }
    }

    @Override
    public String toString() {
        return "Dimension [height=" + height + ", length=" + length
                + ", width=" + width + "]";
    }
}
